{"mappings":"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","sources":["examples/example-utils.ts","src/SceneCanvas2d.ts"],"sourcesContent":["import { Clip } from \"animcc\";\nimport { Library } from \"animcc\";\n\n\nexport function setupCanvas(canvas:HTMLCanvasElement) {\n    // Set the context quality and smoothing\n    const ctx = canvas.getContext('2d')!\n    ctx.imageSmoothingEnabled = true;\n    ctx.imageSmoothingQuality = 'high'\n\n    // Set the canvas according to window width\n    var bodyRec = document.body.getBoundingClientRect();\n    canvas.width = Math.min(1000, bodyRec.width - 8);\n    canvas.height = canvas.width;\n\n    // Get the device pixel ratio, falling back to 1.\n    let dpr = window.devicePixelRatio || 1;\n\n    // Get the size of the canvas in CSS pixels.\n    let rect = canvas.getBoundingClientRect();\n    \n    // Give the canvas pixel dimensions of their CSS\n    // size * the device pixel ratio.\n    //canvas.style.border = \"2px solid gray\";\n    canvas.style.width = \"\" + canvas.width + \"px\";\n    canvas.style.height = \"\" + canvas.height + \"px\";\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n\n    return dpr;\n}\n\n\n\nexport function addExampleButtons(libraryKey:string, libs:Record<string, Library>, onLibrarySelected:(nextLibrary:Library)=>void, onSymbolPicked:(nextSymbol:Clip)=>void, onMinus:()=>void, onPlus:()=>void){\n    const library = libs[libraryKey]\n    const buttons = document.getElementById(\"buttons\")!\n\n    const selector = document.createElement('select')\n    selector.value = libraryKey\n    selector.onchange = (e) => {\n        const buttons = document.getElementById('buttons')!\n        while(buttons.childNodes.length > 0) buttons.childNodes[0].remove();\n        addExampleButtons(selector.value, libs, onLibrarySelected, onSymbolPicked, onMinus, onPlus)\n        onLibrarySelected(libs[selector.value])\n    }\n    buttons.appendChild(selector)\n    for(const libraryName of Object.keys(libs)){\n        const option = document.createElement('option')\n        option.value = libraryName\n        option.selected = libraryName == libraryKey\n        option.innerText = libraryName\n        selector.appendChild(option)\n    }\n\n    const minusButton = document.createElement('button')\n    minusButton.innerHTML = '-'\n    minusButton.onclick = onMinus\n    buttons.appendChild(minusButton);\n\n    const plusButton = document.createElement('button')\n    plusButton.innerHTML = '+'\n    plusButton.onclick = onPlus\n    buttons.appendChild(plusButton);\n\n    for(const clip of library.clips){\n        if(clip.name.indexOf(\"/\")!=-1 || clip.name.indexOf(\"Symbol \")==0 || clip.name.indexOf(\"Tween \")==0 || clip.name.indexOf(\"/Symbol \")!=-1 || clip.name.indexOf(\"/Tween \")!=-1) continue;\n        var button = document.createElement(\"button\")\n        button.innerHTML = clip.name\n        button.onclick = () => onSymbolPicked(clip)\n        buttons.appendChild(button)\n    }\n}","import { Scene } from \"./Scene\"\nimport { ClipInstance } from \"./ClipInstance\";\nimport { Drawable } from \"./Drawable\"\nimport { Frame } from \"./Frame\";\nimport { Instance } from \"./Instance\"\nimport { JsonFilterDropShadow, JsonFilterType } from \"./json/AnimationJson\";\nimport { Layer } from \"./Layer\";\nimport { Sprite } from \"./Sprite\"\nimport { SpriteInstance } from \"./SpriteInstance\";\nimport { modWrap } from \"./util/math\";\nimport { Float } from \"./types/Float\";\n\n\n// This is all of the library's rendering code required to draw into a canvas 2d context.\n// This could easily be ported to any immediate mode rendering context, ie WebGL.\n// This could also be ported to scene graph based libraries like PixiJS, or event the DOM,\n// with a few modification to faciliate mapping to a scene graph.\nexport class SceneCanvas2d extends Scene{\n    \n    canvas:HTMLCanvasElement\n    stack:CanvasRenderingContext2D[]\n    pool:CanvasRenderingContext2D[]\n\n    //imageData:Record<string, \n\n    private _mouseX:number;\n    private _mouseY:number;\n\n\n    constructor(ctx:CanvasRenderingContext2D){\n        super();\n        this.canvas = ctx.canvas\n        this.stack = [ctx]\n        this.pool = [];\n\n        this._mouseX = -1;\n        this._mouseY = -1;\n        ctx.canvas.addEventListener('mousemove', this.onMouseMove.bind(this))\n    }\n\n\n    onMouseMove(e:MouseEvent){\n        const rect = this.canvas.getBoundingClientRect()\n        const scaleX = this.canvas.width / rect.width\n        const scaleY = this.canvas.height / rect.height\n        this._mouseX = (e.clientX - rect.left) * scaleX\n        this._mouseY = (e.clientY - rect.top) * scaleY\n    }\n\n\n    get mouseX(){\n        return this._mouseX\n    }\n\n\n    get mouseY(){\n        return this._mouseY\n    }\n\n\n    getLocal(x:number, y:number){\n        const point = new DOMPoint(x, y)\n        const matrix = this.ctx.getTransform()\n        const imatrix = matrix.inverse()\n        return point.matrixTransform(imatrix)\n    }\n\n\n    get ctx(){\n        return this.stack[this.stack.length-1]\n    }\n\n\n    pushRenderTarget(){\n        const ctx = this.pool.length==0 ? document.createElement('canvas').getContext('2d')! : this.pool.pop()!\n        ctx.canvas.width = this.ctx.canvas.width\n        ctx.canvas.height = this.ctx.canvas.height\n        ctx.setTransform(this.ctx.getTransform())\n        this.stack.push(ctx)\n    }\n\n\n    popRenderTarget(){\n        if(this.stack.length<=1) throw(\"Cannot pop stack\")\n        const ctx = this.stack.pop()!;\n        this.ctx.save();\n        this.ctx.resetTransform()\n        this.ctx.drawImage(ctx!.canvas, 0, 0);\n        this.ctx.restore();\n        this.pool.push(ctx)\n    }\n\n\n    draw = (item:Drawable, frame:Float, lerp?:boolean, callback?:(item:Drawable, frame:Float, lerp?:boolean)=>void) => {\n        if(item instanceof Layer){\n           if(item.type=='Clipper'){\n           }else if(item.clippedBy){\n                const clipLayer = item.clip.layersByName[item.clippedBy]\n                this.pushRenderTarget()\n                clipLayer.draw(frame, lerp, callback)\n                this.ctx.globalCompositeOperation = 'source-in'\n                if(callback) callback(item, frame, lerp)\n                else item.draw(frame, lerp, callback)\n                this.popRenderTarget()\n            }else{\n                if(callback) callback(item, frame, lerp)\n                else item.draw(frame, lerp, callback)\n            }\n        }else if(item instanceof Instance){\n            this.ctx.save()\n            this.transformInstance(item, frame, lerp)\n            const didPushContext = this.handleFilters(item, frame, lerp)\n            this.handleColor(item, frame, lerp)\n            if(callback) callback(item, frame, lerp)\n            else item.draw(frame, lerp, callback)\n            if(didPushContext) this.popRenderTarget()\n            this.ctx.restore()\n        }else if(item instanceof Sprite){\n            if(callback) callback(item, frame, lerp)\n            else item.draw(frame, lerp, callback)\n        }else{\n            if(callback) callback(item, frame, lerp)\n            else item.draw(frame, lerp, callback)\n        }\n    }\n\n\n\n    drawImage = (image:HTMLImageElement, sx:number, sy:number, sw:number, sh:number, rx:number, ry:number, rw:number, rh:number) => {\n        this.ctx.drawImage(image, sx, sy, sw, sh, rx, ry, rw, rh)\n    }\n\n    \n    private handleColor(item:Instance, frame:Float, lerp?:boolean){\n        // TODO: Handle lerp on color\n        if(item.color?.mode == 'CA' || item.color?.mode == 'Alpha' || item.color?.mode == 'Advanced' || item.color?.mode == 'AD') this.ctx.globalAlpha *= item.color.alphaMultiplier;\n    }\n\n\n    private handleFilters(item:Instance, frame:Float, lerp?:boolean){\n        // TODO: Handle lerp on filters\n        if(item.filters){\n            for(let k of Object.keys(item.filters)){\n                const key = k as JsonFilterType;\n                if(key=='DropShadowFilter'){\n                    const filter = item.filters[key] as JsonFilterDropShadow;\n                    this.pushDropShadow(\n                        filter.color + (Math.round(filter.strength*255)).toString(16),\n                        filter.blurX,\n                        Math.cos(filter.angle*Math.PI/180) * filter.distance,\n                        Math.sin(filter.angle*Math.PI/180) * filter.distance,\n                    )\n                    return true;\n                }\n            }\n        }\n    }\n\n\n    pushDropShadow(color:string, blur:number, offsetX:Float=0, offsetY:Float=0){\n        this.ctx.save();\n        this.ctx.shadowColor = color;\n        this.ctx.shadowBlur = blur;\n        this.ctx.shadowOffsetX = offsetX;\n        this.ctx.shadowOffsetY = offsetY;\n        this.pushRenderTarget();\n    }\n\n\n    popDropShadow(){\n        this.popRenderTarget();\n        this.ctx.restore()\n    }\n\n\n    private transformInstance(item:Instance, frame:Float, lerp?:boolean){\n        if(lerp && item.next){\n            const t = (modWrap(frame, item.totalFrames)-item.index) / item.frame.totalFrames;\n            const m1 = item.matrix\n            const m2 = item.next.matrix \n            \n            this.ctx.transform(\n                m1._00 + (m2._00-m1._00)*t,\n                m1._01 + (m2._01-m1._01)*t,\n                m1._10 + (m2._10-m1._10)*t,\n                m1._11 + (m2._11-m1._11)*t,\n                m1._30 + (m2._30-m1._30)*t,\n                m1._31 + (m2._31-m1._31)*t,\n            )\n        }else{\n            this.ctx.transform(item.matrix._00, item.matrix._01, item.matrix._10, item.matrix._11, item.matrix._30, item.matrix._31)\n        }\n    }\n    \n}"],"names":["$aaf40ca1d0747f0a$export$c6141e7c4932b646","canvas","ctx","getContext","imageSmoothingEnabled","imageSmoothingQuality","bodyRec","document","body","getBoundingClientRect","width","Math","min","height","dpr","window","devicePixelRatio","rect","style","$aaf40ca1d0747f0a$export$eaf1d37fe8fe955c","libraryKey","libs","onLibrarySelected","onSymbolPicked","onMinus","onPlus","library","buttons1","getElementById","selector","createElement","value","onchange","e","buttons","childNodes","length","remove","appendChild","libraryName","Object","keys","option","selected","innerText","minusButton","innerHTML","onclick","plusButton","clip","clips","name","indexOf","button","$2cf237fc95d093fb$export$d39dd219fabfabba","$8Ge4E","Scene","super","this","draw","item","frame","lerp","callback","$grEWN","Layer","type","clippedBy","clipLayer","layersByName","pushRenderTarget","globalCompositeOperation","popRenderTarget","$aIUQE","Instance","save","transformInstance","didPushContext","handleFilters","handleColor","restore","$7oRJk","Sprite","drawImage","image","sx","sy","sw","sh","rx","ry","rw","rh","stack","pool","_mouseX","_mouseY","addEventListener","onMouseMove","bind","scaleX","scaleY","clientX","left","clientY","top","mouseX","mouseY","getLocal","x","y","point","DOMPoint","imatrix","getTransform","inverse","matrixTransform","pop","setTransform","push","resetTransform","color","mode","globalAlpha","alphaMultiplier","filters","k","key","filter","pushDropShadow","round","strength","toString","blurX","cos","angle","PI","distance","sin","blur","offsetX","offsetY","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","popDropShadow","next","t","$ixNXR","modWrap","totalFrames","index","m1","matrix","m2","transform","_00","_01","_10","_11","_30","_31"],"version":3,"file":"index.bd15c84a.js.map"}