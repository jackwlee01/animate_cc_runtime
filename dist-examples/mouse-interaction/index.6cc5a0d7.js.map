{"mappings":"4hBASA,MAAMA,EAASC,SAASC,eAAe,UACjCC,EAAQH,EAAOI,WAAW,MAChC,IAAIC,EAAMC,EAAAC,YAAYP,GAGtB,MAAMQ,EAAQ,IAAIC,EAAAC,cAAcP,GAC1BQ,EAAcH,EAAMI,cAAc,OAAQ,kBAUhD,IAAIC,EAAQ,EACRC,GAAY,EACZC,GAAe,WAeVC,IAEL,IAAIC,EAAU,GACVC,EAAY,KAKhB,OAAO,SAASC,EAAcC,EAAeC,EAAcC,GAGvD,GAFc,GAAXR,IAAkBI,EAAY,MAE9BE,aAAgBG,EAAAC,KAAK,CACpB,MAAMC,EAAYP,GAAwB,YAAXE,EAAKM,KACjCD,GAAWjB,EAAMmB,eAAe,UAAW,GAAI,EAAG,GACrDP,EAAKQ,KAAKP,EAAOC,EAAMH,GACpBM,GAAWjB,EAAMqB,qBAClB,GAAGT,aAAgBU,EAAAC,OAAO,CAC5B,MAAMC,EAASf,EAAQG,EAAKM,MACtBO,EAAUD,EAASA,EAAOE,EAAI,EAC9BC,EAAUH,EAASA,EAAOI,EAAI,EAQpC,GAPA5B,EAAM6B,IAAIC,OACN9B,EAAM6B,IAAIE,UAAUN,EAASE,IACzBjB,GAAaH,GAAgBK,EAAKoB,eAAehC,EAAMiC,OAAQjC,EAAMkC,OAAQlC,EAAM6B,IAAIM,kBACvFzB,EAAY,MAAEE,EAAMY,OAAQxB,EAAMoC,SAASpC,EAAMiC,OAAQjC,EAAMkC,SACzC,MAApBzB,EAAQG,EAAKM,QAAaT,EAAQG,EAAKM,MAAQ,IAAImB,SAAS,EAAG,KAEzErC,EAAM6B,IAAIS,UACP5B,GAAaA,EAAUE,MAAMA,EAAK,CACjC,MAAM2B,EAAQvC,EAAMoC,SAASpC,EAAMiC,OAAQjC,EAAMkC,QACjDzB,EAAQG,EAAKM,MAAMQ,EAAIa,EAAMb,EAAIhB,EAAUc,OAAOE,EAClDjB,EAAQG,EAAKM,MAAMU,EAAIW,EAAMX,EAAIlB,EAAUc,OAAOI,EAEtD5B,EAAM6B,IAAIC,OACN9B,EAAM6B,IAAIE,UAAUN,EAASE,GAC7Bf,EAAKQ,KAAKP,EAAOC,EAAMH,GAC3BX,EAAM6B,IAAIS,eAGV1B,EAAKQ,KAAKP,EAAOC,EAAMH,IAlDnCnB,EAAOgD,YAAW,KACdjC,GAAe,EACfD,GAAY,GAEhBd,EAAOiD,UAAS,KACZnC,GAAY,GAmDhB,MAAMoC,EAAYlC,IACZmC,EAAYnC,aAEToC,IACL5C,EAAM6B,IAAIgB,UAAU,EAAG,EAAGrD,EAAOsD,MAAOtD,EAAOuD,QAE/C/C,EAAM6B,IAAIC,OAEN9B,EAAM6B,IAAImB,KAAO,kBACjBhD,EAAM6B,IAAIoB,SAAS,0CAA2C,GAAI,IAElEjD,EAAM6B,IAAIE,UAAUvC,EAAOsD,MAAM,EAAGtD,EAAOuD,OAAO,GAClD/C,EAAM6B,IAAIqB,MAAMrD,EAAKA,GAErBG,EAAM6B,IAAIE,WAAU,IAAM,GAC1B/B,EAAMoB,KAAKjB,EAAYgD,OAAO,YAAa9C,GAAO,EAAMqC,GAExD1C,EAAM6B,IAAIE,UAAU,IAAK,GACzB/B,EAAMoB,KAAKjB,EAAYgD,OAAO,YAAa9C,GAAO,EAAMsC,GAE5D3C,EAAM6B,IAAIS,UAEI,GAAXhC,IAAkBD,GAAO,GAC5BE,GAAe,EACf6C,sBAAsBR,2BA3FhBzC,EAAYkD,WAClBT,IA6FJU","sources":["examples/mouse-interaction/mouse-interaction.ts"],"sourcesContent":["import { setupCanvas } from \"../example-utils\";\nimport { SceneCanvas2d } from \"animcc/SceneCanvas2d\";\nimport { Drawable } from \"animcc/Drawable\";\nimport { Sprite } from \"animcc/Sprite\";\nimport { Clip } from \"animcc/Clip\";\n\n\n\n// Set up canvas\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement\nconst ctx2d = canvas.getContext('2d')!\nvar dpr = setupCanvas(canvas) // Device pixel ratio\n\n// Set up animation context and animation libraries\nconst scene = new SceneCanvas2d(ctx2d)\nconst hatsLibrary = scene.createLibrary('hats', '../assets/hats')\n\n\nasync function init(){\n    await hatsLibrary.loadData();\n    update();\n}\n\n\n// App State\nlet frame = 0\nlet mouseDown = false\nlet mousePressed = false\n\n// Handlers\ncanvas.onmousedown = () => {\n    mousePressed = true\n    mouseDown = true\n}\ncanvas.onmouseup = () => {\n    mouseDown = false\n}\n\n// Experimental: This library shouldn't focus on interaction, but it can provide a few rudimentary methods\n// to faciliate users to build out thier own interaction functionality. This example shows how \n// coordinates can be attained in a local space, and how pixels can be queried to faciliate\n// mouse interaction. A closure is used to faciliate local state.\nfunction createState(){\n    // Item state\n    let offsets = {} as Record<string, DOMPoint>\n    let selection = null as null | {\n        item:Sprite,\n        offset:DOMPoint,\n    };\n\n    return function drawWithLogic(item:Drawable, frame:number, lerp?:boolean){\n        if(mouseDown==false) selection = null\n\n        if(item instanceof Clip){\n            const highlight = selection && item.name==\"StarDude\";\n            if(highlight) scene.pushDropShadow('#009900', 10, 0, 0);\n            item.draw(frame, lerp, drawWithLogic)\n            if(highlight) scene.popDropShadow()\n        }else if(item instanceof Sprite){\n            const offset = offsets[item.name];\n            const offsetX = offset ? offset.x : 0\n            const offsetY = offset ? offset.y : 0\n            scene.ctx.save()\n                scene.ctx.translate(offsetX, offsetY)\n                if(!selection && mousePressed && item.isSolidPixelAt(scene.mouseX, scene.mouseY, scene.ctx.getTransform())){\n                    selection = { item, offset: scene.getLocal(scene.mouseX, scene.mouseY) }\n                   if(offsets[item.name]==null) offsets[item.name] = new DOMPoint(0, 0)\n                }\n            scene.ctx.restore()\n            if(selection && selection.item==item){\n                const local = scene.getLocal(scene.mouseX, scene.mouseY)\n                offsets[item.name].x = local.x - selection.offset.x\n                offsets[item.name].y = local.y - selection.offset.y\n            }\n            scene.ctx.save()\n                scene.ctx.translate(offsetX, offsetY)\n                item.draw(frame, lerp, drawWithLogic)\n            scene.ctx.restore()\n            \n        }else{\n            item.draw(frame, lerp, drawWithLogic)\n        \n        }\n    }\n}\n\nconst callbackA = createState()\nconst callbackB = createState()\n\nfunction update(){\n    scene.ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n    scene.ctx.save();\n\n        scene.ctx.font = '36px sans-serif';\n        scene.ctx.fillText('Click and drag sprites on the animation', 20, 50);\n    \n        scene.ctx.translate(canvas.width/2, canvas.height/2)\n        scene.ctx.scale(dpr, dpr)\n\n        scene.ctx.translate(-100, 0);\n        scene.draw(hatsLibrary.symbol(\"StarDude\"), frame, true, callbackA)\n\n        scene.ctx.translate(200, 0);\n        scene.draw(hatsLibrary.symbol(\"StarDude\"), frame, true, callbackB)\n\n    scene.ctx.restore()\n    \n    if(mouseDown==false) frame+=1;\n    mousePressed = false;\n    requestAnimationFrame(update)\n}\n\ninit();\n"],"names":["$4898f6d2732c4def$var$canvas","document","getElementById","$4898f6d2732c4def$var$ctx2d","getContext","$4898f6d2732c4def$var$dpr","$5BHcR","setupCanvas","$4898f6d2732c4def$var$scene","$b4RtA","SceneCanvas2d","$4898f6d2732c4def$var$hatsLibrary","createLibrary","$4898f6d2732c4def$var$frame","$4898f6d2732c4def$var$mouseDown","$4898f6d2732c4def$var$mousePressed","$4898f6d2732c4def$var$createState","offsets","selection","drawWithLogic","item","frame","lerp","$iwtVH","Clip","highlight","name","pushDropShadow","draw","popDropShadow","$7oRJk","Sprite","offset","offsetX","x","offsetY","y","ctx","save","translate","isSolidPixelAt","mouseX","mouseY","getTransform","getLocal","DOMPoint","restore","local","onmousedown","onmouseup","$4898f6d2732c4def$var$callbackA","$4898f6d2732c4def$var$callbackB","$4898f6d2732c4def$var$update","clearRect","width","height","font","fillText","scale","symbol","requestAnimationFrame","loadData","$4898f6d2732c4def$var$init"],"version":3,"file":"index.6cc5a0d7.js.map"}