{"mappings":"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","sources":["src/SceneDom.ts","examples/dom/dom.ts"],"sourcesContent":["import { Layer } from \"./Layer\";\nimport { Scene } from \"./Scene\"\nimport { ClipInstance } from \"./ClipInstance\";\nimport { Drawable } from \"./Drawable\"\nimport { Frame } from \"./Frame\";\nimport { Instance } from \"./Instance\"\nimport { Sprite } from \"./Sprite\"\nimport { SpriteInstance } from \"./SpriteInstance\";\nimport { modWrap } from \"./util/math\";\nimport { Float } from \"./types/Float\";\n\n\nexport class SceneDom extends Scene{\n    \n    elemId:string\n    elems:Array<HTMLElement>\n    stack:Array<HTMLElement>\n    \n\n    constructor(elemId:string){\n        super();\n        this.elemId = elemId\n        this.elems = []\n        this.stack = [this.container]\n    }\n\n\n    get current(){\n        return this.stack[this.stack.length-1] as HTMLDivElement\n    }\n\n\n\n    pushElem(type:string, name:string, id:string){\n        const elem = document.createElement('div');\n        elem.className = `anim anim-${type} anim-of-${name}`\n        elem.style.position = 'absolute'\n        elem.style.top = '0px'\n        elem.style.left = '0px'\n        elem.style.width = '0px'\n        elem.style.height = '0px'\n        this.current.appendChild(elem)\n        this.elems.push(elem)\n        this.stack.push(elem)\n    }\n\n\n    pop(){\n        this.stack.pop()\n    }\n\n\n    get container(){\n        return document.getElementById(this.elemId) as HTMLDivElement\n    }\n\n\n    clear(){\n        while(this.elems.length > 0){\n            const elem = this.elems.shift()!;\n            elem.remove();\n        }\n    }\n\n\n    draw = (item:Drawable, frame:Float, lerp?:boolean, callback?:(item:Drawable, frame:Float, lerp?:boolean)=>void) => {\n        if(!this.container) return;\n        if(item instanceof Layer){\n            this.pushElem('layer', item.name, item.id)\n            if(callback) callback(item, frame, lerp)\n            else item.draw(frame, lerp, callback)\n            this.pop()\n        }else if(item instanceof Frame){\n            this.pushElem('frame', item.name, item.id)\n            if(callback) callback(item, frame, lerp)\n            else item.draw(frame, lerp, callback)\n            this.pop()\n        }else if(item instanceof SpriteInstance){\n            this.pushElem('sprite', item.name, item.id)\n            this.transformInstance(item, frame, lerp)\n            if(callback) callback(item, frame, lerp)\n            else item.draw(frame, lerp, callback)\n            this.pop()\n        }else if(item instanceof ClipInstance){\n            this.pushElem('clip', item.name, item.id)\n            this.transformInstance(item, frame, lerp)\n            if(callback) callback(item, frame, lerp)\n            else item.draw(frame, lerp, callback)\n            this.pop()\n        }else if(item instanceof Sprite){\n            this.current.style.width = item.width + 'px'\n            this.current.style.height = item.height + 'px'\n            this.current.style.backgroundImage = `url(${item.atlas.image.src})`\n            this.current.style.backgroundPosition = `${-item.x}px ${-item.y}px`\n            //this.current.style.border = '1px solid red'\n        }else{\n            if(callback) callback(item, frame, lerp)\n            else item.draw(frame, lerp, callback)\n        }\n    }\n\n\n    pushTranslate(x:string, y:string){\n        this.pushElem('transform', 'translate', '__transform__')\n        this.current.style.transform = `translate(${x}, ${y})`\n    }\n\n\n    pushScale(x:string, y:string){\n        this.pushElem('transform', 'scale', '__scale__')\n        this.current.style.transform = `scale(${x}, ${y})`\n    }\n\n    pushRotation(z:string){\n        this.pushElem('transform', 'rotation', '__rotation__')\n        this.current.style.transform = `rotate(${z})`\n    }\n    \n\n    transformInstance(item:Instance, frame:Float, lerp?:boolean){\n        /*\n        const m = item.matrix2d\n        if(lerp && item.next){\n            const t = (modWrap(frame, item.totalFrames)-item.index) / item.frame.totalFrames;\n            const m1 = item.matrix2d\n            const m2 = item.next.matrix2d \n            this.current.style.transform = `matrix(${m1.a + (m2.a-m1.a)*t}, ${m1.b + (m2.b-m1.b)*t}, ${m1.c + (m2.c-m1.c)*t}, ${m1.d + (m2.d-m1.d)*t}, ${m1.e + (m2.e-m1.e)*t}, ${m1.f + (m2.f-m1.f)*t})`\n        }else{\n            this.current.style.transform = `matrix(${m.a}, ${m.b}, ${m.c}, ${m.d}, ${m.e}, ${m.f})`\n       }\n        */\n       const m = item.matrix;\n       this.current.style.transform = `matrix3d(${m._00}, ${m._01}, ${m._02}, ${m._03}, ${m._10}, ${m._11}, ${m._12}, ${m._13}, ${m._20}, ${m._21}, ${m._22}, ${m._23}, ${m._30}, ${m._31}, ${m._32}, ${m._33})`\n    }\n\n}","import { SceneDom } from \"animcc/SceneDom\";\nimport { Drawable } from \"animcc/Drawable\";\n\n\n// Set up animation context and animation libraries\nconst scene = new SceneDom('anim')\nconst testLibrary = scene.createLibrary('test', '../assets/test')\n\n\nasync function init(){\n    await testLibrary.loadData();\n    update();\n}\n\nlet frame = 0;\nlet play = true;\nlet swap = false;\n\nconst btnPause = document.getElementById('btn-pause')!\nconst btnSwap = document.getElementById('btn-swap')!\nbtnPause.onclick = () => {\n    play = !play;\n    btnPause.innerText = play ? \"Pause\" : \"Play\"\n    let gunInput = document.getElementById(\"gun-input\");\n    if(gunInput){\n        gunInput.focus();\n    }\n}\nbtnSwap.onclick = () => {\n    swap = !swap;\n}\n\nlet gunInput = document.createElement('input')\ngunInput.id = \"gun-input\"\ngunInput.value = \"GUN!!!!\"\ngunInput.style.boxShadow = '0px 3px 8px rgb(0 0 0 / 40%)'\ngunInput.style.position = 'absolute'\ngunInput.style.top = '-10px'\ngunInput.style.left = '-100px'\ngunInput.style.width = '150px'\ngunInput.style.height = '30px'\n\nlet shellInput = document.createElement('input')\nshellInput.type = 'checkbox'\nshellInput.id = \"shell-input\"\nshellInput.style.position = 'absolute'\nshellInput.style.width = '30px'\nshellInput.style.height = '30px'\nshellInput.style.transform = 'translate(-50%, -50%)'\nshellInput.checked = true;\n\n\nfunction drawWithLogic(item:Drawable, frame:number, lerp?:boolean){\n    if(swap && item.name==\"Shell\"){\n        scene.current.appendChild(shellInput)\n    }else if(swap && item.name==\"stardude_assets/StarGuyGun\"){\n        scene.current.appendChild(gunInput)\n    }else{\n        item.draw(frame, lerp, drawWithLogic)\n    }\n}\n\nfunction update(){\n    if(play){\n        scene.clear();\n\n        scene.pushTranslate('0px', '10px')\n        scene.pushScale('1', '1')\n        scene.pushRotation('0deg')\n        testLibrary.symbol(\"StarDude\").draw(frame, false, drawWithLogic)\n        scene.pop();\n        scene.pop();\n        scene.pop();\n\n        scene.pushTranslate('100px', '10px')\n        scene.pushScale('1', '1')\n        scene.pushRotation('0deg')\n        testLibrary.symbol(\"Walker_Laser_Rotating\").draw(frame, false, drawWithLogic)\n        scene.pop();\n        scene.pop();\n        scene.pop();\n\n        frame += 1;\n    }\n\n    requestAnimationFrame(update)\n}\n\n\n\n\ninit();\n"],"names":["$cbd08b6817202718$export$55f5a12c5623e1b6","$8Ge4E","Scene","elemId","super","this","draw","item","frame","lerp","callback","container","$grEWN","Layer","pushElem","name","id","pop","$b16Gm","Frame","$1WBAd","SpriteInstance","transformInstance","$37DlR","ClipInstance","$7oRJk","Sprite","current","style","width","height","backgroundImage","atlas","image","src","backgroundPosition","x","y","elems","stack","length","type","elem","document","createElement","className","position","top","left","appendChild","push","getElementById","clear","shift","remove","pushTranslate","transform","pushScale","pushRotation","z","m","matrix","_00","_01","_02","_03","_10","_11","_12","_13","_20","_21","_22","_23","_30","_31","_32","_33","$57bd37ec10954920$var$scene","$57bd37ec10954920$var$testLibrary","createLibrary","$57bd37ec10954920$var$frame","$57bd37ec10954920$var$play","$57bd37ec10954920$var$swap","$57bd37ec10954920$var$btnPause","$57bd37ec10954920$var$btnSwap","onclick","innerText","gunInput","focus","$57bd37ec10954920$var$gunInput","value","boxShadow","$57bd37ec10954920$var$shellInput","$57bd37ec10954920$var$drawWithLogic","$57bd37ec10954920$var$update","symbol","requestAnimationFrame","checked","loadData","$57bd37ec10954920$var$init"],"version":3,"file":"index.356b9189.js.map"}